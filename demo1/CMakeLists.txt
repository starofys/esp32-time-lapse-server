cmake_minimum_required(VERSION 3.16)
project(demo1)
set(CMAKE_CXX_STANDARD 17)

aux_source_directory(./src SRC)
include_directories(./include)
include_directories(${FFmpeg_INCLUDE_DIRS})
include_directories(../third_partys/asio2)

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(OPENSSL_LIBS "libssl.lib;libcrypto.lib;Crypt32.lib;")
    set(GENERAL_LIBS "ws2_32;mswsock;")
else ()
    set(GENERAL_LIBS -lpthread)
endif ()
#IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
#    set(OPENSSL_LIBS libssl.a libcrypto.a)
#    set(GENERAL_LIBS -lpthread -lrt -ldl stdc++fs)
#    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/linux/x64)
#    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/linux/x86)
#    endif()
#ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
#    set(OPENSSL_LIBS "libssl.lib;libcrypto.lib;Crypt32.lib;")
#    set(GENERAL_LIBS "ws2_32;mswsock;")
#    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/windows/x64)
#    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/windows/x86)
#    endif()
#ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
#    set(OPENSSL_LIBS libssl.a libcrypto.a)
#    set(GENERAL_LIBS -lpthread -lrt -ldl stdc++fs)
#ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
#    set(OPENSSL_LIBS libssl.a libcrypto.a)
#    set(GENERAL_LIBS -lpthread -ldl)
#    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/mac)
#    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
#        set(ASIO2_LIBS_DIR ${ASIO2_ROOT_DIR}/3rd/openssl/prebuilt/mac)
#    endif()
#ELSE ()
#    set(OPENSSL_LIBS libssl.a libcrypto.a)
#    set(GENERAL_LIBS -lpthread -lrt -ldl stdc++fs)
#ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

message("GENERAL_LIBS = ${GENERAL_LIBS}")


add_executable(demo1 ${SRC})
target_link_libraries(demo1 go_ffmpeg ${FFmpeg_LIBRARIES} ${GENERAL_LIBS})
set(EXECUTABLE_OUTPUT_PATH  ../bin)
